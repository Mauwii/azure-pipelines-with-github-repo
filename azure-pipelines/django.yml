# Python Django
# Test a Django project on multiple versions of Python.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  paths:
    include:
      - azure-pipelines/django.yml

parameters:
  - name: pythonVersions
    type: object
    default:
      - '3.9'
  - name: jiraServerName
    displayName: Jira Instance Server Name
    type: string
    default: qaland.atlassian.net
  - name: jiraProjectKey
    displayName: Jira Project Key
    type: string
    default: DJANGO

steps:
  - template: stages/jobs/steps/checkout_submodules.yml
    parameters:
      submodule: src/msdocs-python-django-webapp-quickstart

  - ${{ each pythonVersion in parameters.pythonVersions }}:
      - task: UsePythonVersion@0
        displayName: 'Use Python ${{ pythonVersion }}'
        inputs:
          versionSpec: ${{ pythonVersion }}
          architecture: 'x64'

      - task: PythonScript@0
        displayName: 'Export project path'
        inputs:
          scriptSource: 'inline'
          script: |
            """Search all subdirectories for `manage.py`."""
            from glob import iglob
            from os import path
            # Python >= 3.5
            manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
            if not manage_py:
                raise SystemExit('Could not find a Django project')
            project_location = path.dirname(path.abspath(manage_py))
            print('Found Django project in', project_location)
            print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))

      - script: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install unittest-xml-reporting
        displayName: 'Install prerequisites'
        workingDirectory: $(projectRoot)

      - script: |
          export SECRET_KEY="$(secretKey)"
          export APPLICATIONINSIGHTS_CONNECTION_STRING="$APPLICATIONINSIGHTS_CONNECTION_STRING"
          pushd '$(projectRoot)'
          python manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input
        displayName: 'Run tests'
        workingDirectory: $(projectRoot)
        continueOnError: true
        env:
          secretKey: $(secretKey)
          APPLICATIONINSIGHTS_CONNECTION_STRING: $(APPLICATIONINSIGHTS_CONNECTION_STRING)

      - task: PublishTestResults@2
        displayName: Publish Results to DevOps
        inputs:
          testResultsFiles: '**/TEST-*.xml'
          testRunTitle: 'Python ${{ pythonVersion }}'
        condition: succeededOrFailed()

      - bash: |
          for testresult in $(ls -1 TEST-*.xml); do
              echo "publishing $testresult"
              curl -H "Content-Type: multipart/form-data" \
                  -H "Authorization: Bearer ${jira_token}"  \
                  -F "file=@${testresult}" \
                  "http://${{ parameters.jiraServerName }}/rest/raven/1.0/import/execution/junit?projectKey=${{ parameters.jiraProjectKey }}"
          done
        displayName: Publish Results to Jira-XRAY
        workingDirectory: $(projectRoot)
        env:
          jira_token: $(jira_token)
