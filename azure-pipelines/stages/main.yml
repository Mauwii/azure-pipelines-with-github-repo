parameters:
  - name: pythonVersion
    displayName: Python Version to use when building MkDocs-Material
    type: string
    default: $(pythonVersion)
  - name: mkdocsSiteDir
    displayName: Name of the Directory where MkDocs will be built to
    type: string
    default: 'site'
  - name: mkdocsDeploy
    displayName: When disabled MkDocs will only be built
    type: boolean
    default: false
  - name: bicepDir
    displayName: Directory containing Folders with Bicep Templates
    type: string
    default: $(bicepDir)
  - name: bicepParameter
    displayName: Used in some templates to change Resource Name or other variables
    type: string
    values:
      - dev
      - stg
      - prod
    default: dev
  - name: resourceGroupName
    displayName: Name of the Resource Group where templates will be deployed to
    type: string
    default: $(resourceGroupName)
  - name: azureSubscription
    displayName: Name of the ARM-Service Connection
    type: string
    default: $(azureSubscription)
  - name: location
    displayName: Location where the Resources will be deployed to
    type: string
    default: $(location)
  # - name: vmImage
  #   displayName: Image the Build Agent should use
  #   type: string
  #   values:
  #     - 'ubuntu-latest'
  #     - 'macOS-latest'
  #     - 'windows-latest'
  - name: agentpool
    displayName: Agent-Pool to be used
    values:
      - 'Azure Pipelines'
      - 'local'
    default: 'Azure Pipelines'
  - name: cleanup
    type: boolean
    default: false

stages:
  - template: bicep_stage.yml
    parameters:
      bicepDir: ${{ parameters.bicepDir }}
      bicepParameter: ${{ parameters.bicepParameter }}
      resourceGroupName: ${{ parameters.resourceGroupName }}
      azureSubscription: ${{ parameters.azureSubscription }}
      location: ${{ parameters.location }}
      agentpool: ${{ parameters.agentpool }}
      # vmImage: ${{ parameters.vmImage }}

  - template: mkdocs_stage.yml
    parameters:
      pythonVersion: ${{ parameters.pythonVersion }}
      mkdocsSiteDir: ${{ parameters.mkdocsSiteDir }}
      mkdocsDeploy: ${{ parameters.mkdocsDeploy }}
      agentpool: ${{ parameters.agentpool }}
      # vmImage: ${{ parameters.vmImage }}

  - ${{ if eq(parameters.cleanup, 'true') }}:
      - stage: cleanup
        displayName: 'I`m just a cleaner'
        dependsOn:
          - bicep
          - mkdocs
        condition: succeeded()

        jobs:
          - job:
            ${{ if eq(parameters.agentpool, 'local') }}:
              pool:
                name: 'local'
            strategy:
              maxParallel: 1
            displayName: 'clean your stuff away'
            steps:
              - task: AzureCLI@2
                inputs:
                  azureSubscription: azure-mauwii
                  scriptType: pscore
                  scriptLocation: inlineScript
                  inlineScript: |
                    Remove-AzResourceGroup `
                      -Name $env:RG `
                      -Force
                    $KeyVaultToDelete = Get-AzKeyVault -InRemovedState
                    foreach ($KV in $KeyVaultToDelete) {
                      Write-Host "Deleting" $KV.VaultName
                      Remove-AzKeyVault `
                        -VaultName $KV.VaultName `
                        -Location $KV.Location `
                        -InRemovedState -Force
                    }

                env:
                  RG: ${{ parameters.resourceGroupName }}
